#!/usr/bin/env node
var async = require('async');
var request = require('request');
var getURLs = require('get-urls');

const MongoClient = require('mongodb').MongoClient;

MongoClient.connect('mongodb://heroku_p4kv17tq:s268pk2ssbk5hd3v3m5175nkfg@ds149069.mlab.com:49069/heroku_p4kv17tq', (err, db) => {
  if (err) return console.log(err)
  getData(db);
})

function getData(db) {

  var options = {
    url: '',
    headers: {
      'User-Agent': 'web:5Ku4NNXMzh5atA:v0.0.1 (by /u/jare_)'
    }
  };

  options['url'] = 'https://www.reddit.com/subreddits/popular.json?limit=25';
  request(options, function (error, response, body) {
    if (error) return console.log('Error getting subs: ', error);
    if (response.statusCode !== 200) return console.log('Error response getting subs');

    var bodyJSON = JSON.parse(body);
    var data = bodyJSON.data.children;
    var subData = data.map(function(sub) { return {url: sub.data.url, name: sub.data.display_name} });
    async.each(subData, function(subDataElement, subCB) {

      let subURL = subDataElement.url;
      let subName = subDataElement.name;
      let subURLFormatted = `https://reddit.com${subURL}.json?sort=top&t=week&limit=100`;
      
      options['url'] = subURLFormatted;
      request(options, function(error, response, body) {

        if (error) { 
          subCB(); 
          return console.log('Error getting articles in sub: ', error); 
        }

        if (response.statusCode !== 200) { 
          subCB(); 
          return console.log('Error response getting articles in sub: ', subURLFormatted); 
        }

        var bodyJSON = JSON.parse(body);
        var data = bodyJSON.data.children;
        var articleIDs = data.map(function(article) { return article.data.id; });
        async.each(articleIDs, function(article, articleCB) {

          var articleCommentsURL = `https://reddit.com${subURL}comments/${article}.json?sort=top&t=week&limit=100`;
          
          options['url'] = articleCommentsURL;
          request(articleCommentsURL, function(error, response, body) {

            try {
              var data = JSON.parse(body);
            } catch (e) {
              articleCB();
              return console.log('Error getting comments in article: ', articleCommentsURL);
            }

            var comments = data.map(function(comment) { 
              return comment.data.children;
            });

            var commentLinkData =  comments.map(function(comment) {
              var commentLinkData = comment.map(function(commentData) {
                if (!commentData.data.body) return [];
                var urls = getURLs(commentData.data.body);

                if (!urls) return [];

                var linkData = [];
                for (let url of urls) {
                  if (url.includes('reddit.com/r') || (!url.includes('.gif') && !url.includes('.gifv')) ) continue;
                  if (url.charAt(url.length - 1) == ')') {
                    url = url.slice(0, -1);
                  }

                  let linkDataElement = {
                    c_id: commentData.data.id,
                    url: url,
                    sub: commentData.data.subreddit
                  }

                  linkData.push(linkDataElement);
                }

                return linkData;
              });

              return commentLinkData;
            });

            var commentLinkData = [].concat.apply([], commentLinkData);
            var commentLinkData = commentLinkData.filter(function(data) {
              return (data.length > 0);
            });

            var linkData = [];
            for (let data of commentLinkData) {                  
              if (data.length === 1) linkData.push(data[0]);
              data.forEach(function(dataElement) {
                linkData.push(dataElement);
              });
            }

            if (linkData.length === 0) {
              articleCB();
              return;
            }

            async.each(linkData, function(linkObject, linkCB) {
              db.collection('links').find({ c_id: linkObject.c_id }).toArray(function(err, results) {
                if (results.length !== 0) {
                  linkCB();
                  return;
                } 

                db.collection('links').insertOne({
                  "c_id": linkObject.c_id,
                  "url": linkObject.url,
                  "sub": linkObject.sub
                }, function(err, results) {linkCB()});
              });
            }, function(err) {
              articleCB();
            });
          });

        }, function(err) {
          subCB();
        });
      });

    }, function(err) {
        process.exit();
    });
  });

}